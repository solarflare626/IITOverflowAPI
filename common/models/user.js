'use strict';

module.exports = function(User) {
	User.beforeCreate = function (next, model) {
    model.createdAt = Date.now();
    next();
  };

  User.beforeUpdate = function (next, model) {
    model.updatedAt = Date.now();
    next();
  };

User.addToLogin = function (credentials, include, callback) {
		credentials.password = 'secret';
		User.findOrCreate({where: {email: credentials.email}},credentials, function (findErr, userData) {
				if (findErr)
					return callback(findErr);



				console.log("exists");
				return User.login(credentials, include, function (loginErr, loginToken) {
					if (loginErr)
						return callback(loginErr);
					/* If we got to this point, the login call was successfull and we
					 * have now access to the token generated by the login function.
					 *
					 * This means that now we can add extra logic and manipulate the
					 * token before returning it. Unfortunately, the login function
					 * does not return the user data, so if we need it we need to hit
					 * the datasource again to retrieve it.
					 */

					// If needed, here we can use loginToken.userId to retrieve
					// the user from the datasource
					return User.findById(loginToken.userId, function (findErr, userData) {
						if (findErr)
							return callback(findErr);

						// Here you can do something with the user info, or the token, or both

						// Return the access token
						return callback(null, loginToken.toObject());
					});
				});

				// Here you can do something with the user info, or the token, or both

				// Return the access token
				
				//return callback(null, loginToken.toObject());
		});
		
		// Invoke the default login function
		
		
	};

	/** Register a path for the new login function
	 */
	User.remoteMethod('addToLogin', {
		'http': {
			'path': '/OAuthLogin',
			'verb': 'post'
		},
		'accepts': [
			{
				'arg': 'credentials',
				'type': 'object',
				'description': 'Login credentials',
				'required': true,
				'http': {
					'source': 'body'
				}
			},
			{
				'arg': 'include',
				'type': 'string',
				'description': 'Related objects to include in the response. See the description of return value for more details.',
				'http': {
					'source': 'query'
				}
			}
		],
		'returns': [
			{
				'arg': 'token',
				'type': 'object',
				'root': true
			}
		]
});
};
